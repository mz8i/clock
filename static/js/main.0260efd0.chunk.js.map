{"version":3,"sources":["clock/dials-hms.ts","clock/interpolation/use-dial-interpolator.ts","clock/display/Dial.tsx","clock/display/Tick.tsx","clock/display/ClockFace.tsx","clock/display/ClockSVG.tsx","clock/interpolation/interpolate.ts","clock/interpolation/circle-distance.ts","hooks/use-previous.ts","clock/interpolation/optimal-direction.ts","clock/interpolation/use-mode-interpolator.ts","clock/use-stopwatch.ts","ui.tsx","clock/display/format-stopwatch.tsx","App.tsx","clock/use-time.ts","hooks/use-toggle.ts","reportWebVitals.ts","index.tsx"],"names":["getClockHMS","dateTime","second","getSeconds","minute","getMinutes","hour","getHours","getStopwatchHMS","timeMs","remaining","fullHours","Math","floor","fullMinutes","InterpolatorState","dialStyles","length","width","color","cap","Dial","type","positionDegrees","animating","x1","y1","x2","y2","transform","strokeWidth","strokeLinecap","stroke","Tick","tick","cx","cy","r","fill","ticks","Array","map","_","i","ClockFace","time","animatingDials","hourDegrees","minuteDegrees","secondDegrees","ClockSVG","children","title","height","interpolateAndClamp","source","target","timeDelta","speed","direction","period","n","moveDistance","circumference","a","b","distanceOnCircle","useDialInterpolator","shouldInterpolate","options","currentValue","useRef","previousTime","value","ref","useEffect","current","usePrevious","useState","Idle","status","setStatus","interpolationTarget","setInterpolationTarget","setDirection","stepInterpolation","useCallback","deltaTime","Finished","Interpolating","half","diff","absDiff","abs","sgn","sign","getOptimalDirectionOnCircle","hmsConfig","RunState","StopwatchActionType","allowedActions","Stopped","Start","Reset","Running","Pause","Paused","stopwatchReducer","state","action","runState","includes","Error","initStopwatch","currentStartTimestamp","timestamp","currentAccruedTime","timeAccruedBeforeCurrent","Button","styled","button","Row","div","Heading","h3","formatStopwatchTime","hours","Date","padZero","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","digits","padStart","App","clockDateTime","updateIntervalMs","setTime","useInterval","useTime","clockTimestamp","getTime","currentTimestamp","useReducer","dispatch","max","useStopwatch","stopwatchTimeMs","stopwatchAction","stopwatchSurplusHours","modeToggle","first","setValue","otherValue","toggle","other","useToggle","modeHMS","clock","stopwatch","mode","modesHMS","targetMode","setTargetMode","interpolate","setInterpolate","targetHMS","interpolators","every","x","mapValues","interpolating","useModeInterpolator","currentHMS","interpolatingDials","className","toLocaleTimeString","y","textAnchor","onClick","style","marginTop","now","icon","faPlay","faPause","faTimes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0260efd0.chunk.js","sourcesContent":["export interface DialsHMS {\n  hour: number;\n  minute: number;\n  second: number;\n}\n\nexport type HMSKey = keyof DialsHMS;\n\nexport function getClockHMS(dateTime: Date): DialsHMS {\n  const second = dateTime.getSeconds();\n  const minute = dateTime.getMinutes() + second / 60;\n  const hour = (dateTime.getHours() + minute / 60) % 12;\n\n  return {\n    hour,\n    minute,\n    second,\n  };\n}\n\nexport function getStopwatchHMS(timeMs: number): DialsHMS {\n  let remaining = timeMs;\n  const fullHours = Math.floor(timeMs / 3_600_000);\n  remaining -= fullHours * 3_600_000;\n  const fullMinutes = Math.floor(remaining / 60_000);\n  remaining -= fullMinutes * 60_000;\n\n  const second = remaining / 1000;\n  const minute = fullMinutes + second / 60;\n  const hour = (fullHours + minute / 60) % 12;\n\n  return {\n    hour,\n    minute,\n    second,\n  };\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { usePrevious } from '../../hooks/use-previous';\nimport { CircleDirection } from './circle-distance';\nimport { interpolateAndClamp } from './interpolate';\nimport { getOptimalDirectionOnCircle } from './optimal-direction';\n\nexport interface DialInterpolatorOptions {\n  speed: number;\n  period: number;\n}\n\nexport enum InterpolatorState {\n  Idle,\n  Interpolating,\n  Finished,\n}\n\nexport function useDialInterpolator(\n  time: number,\n  target: number,\n  shouldInterpolate: boolean,\n  options: DialInterpolatorOptions,\n) {\n  const currentValue = useRef(target);\n  const previousTime = usePrevious(time);\n  const [status, setStatus] = useState(InterpolatorState.Idle);\n  const [interpolationTarget, setInterpolationTarget] = useState<number | null>(null);\n  const [direction, setDirection] = useState<CircleDirection>(1);\n\n  const { speed, period } = options;\n\n  const stepInterpolation = useCallback(() => {\n    if (interpolationTarget == null || previousTime == null) return;\n    const deltaTime = time - previousTime;\n\n    currentValue.current = interpolateAndClamp(\n      currentValue.current,\n      interpolationTarget,\n      deltaTime,\n      speed,\n      direction,\n      period,\n    );\n\n    if (currentValue.current === interpolationTarget) {\n      setStatus(InterpolatorState.Finished);\n    }\n  }, [time, previousTime, interpolationTarget, speed, direction, period]);\n\n  useEffect(() => {\n    if (shouldInterpolate) {\n      if (status === InterpolatorState.Idle) {\n        // if interpolation is required but has not started yet, do nothing\n        return;\n      } else if (status === InterpolatorState.Interpolating) {\n        stepInterpolation();\n      } else {\n        // if interpolation has finished, snap value to target\n        currentValue.current = target;\n      }\n    } else {\n      // if not interpolating, snap value to target\n      currentValue.current = target;\n    }\n  }, [time, previousTime, shouldInterpolate, status, target, stepInterpolation]);\n\n  useEffect(() => {\n    if (shouldInterpolate && status === InterpolatorState.Idle) {\n      setStatus(InterpolatorState.Interpolating);\n    } else if (!shouldInterpolate && status === InterpolatorState.Finished) {\n      setStatus(InterpolatorState.Idle);\n    }\n  }, [shouldInterpolate, status]);\n\n  useEffect(() => {\n    setInterpolationTarget(target);\n    if (status === InterpolatorState.Interpolating) {\n      setDirection(getOptimalDirectionOnCircle(currentValue.current, target, period));\n    }\n  }, [target, period, status]);\n\n  return {\n    value: currentValue.current,\n    status,\n  };\n}\n","import { FC } from 'react';\n\ninterface DialProps {\n  type: 'hour' | 'minute' | 'second';\n  positionDegrees: number;\n  animating?: boolean;\n}\n\nconst dialStyles = {\n  hour: {\n    length: 50,\n    width: 6,\n    color: 'black',\n    cap: 'round',\n  },\n  minute: {\n    length: 80,\n    width: 4,\n    color: 'black',\n    cap: 'round',\n  },\n  second: {\n    length: 90,\n    width: 1,\n    color: 'red',\n    cap: 'square',\n  },\n};\n\nexport const Dial: FC<DialProps> = ({ type, positionDegrees, animating = false }) => {\n  const { length, width, color, cap } = dialStyles[type];\n\n  return (\n    <line\n      x1={0}\n      y1={0}\n      x2={0}\n      y2={-length}\n      transform={`rotate(${positionDegrees})`}\n      strokeWidth={width}\n      strokeLinecap={cap as any}\n      stroke={animating ? 'gray' : color}\n    />\n  );\n};\n","import { FC } from 'react';\n\nexport const Tick: FC<{ tick: number }> = ({ tick }) => {\n  return (\n    <circle\n      cx=\"0\"\n      cy=\"-100\"\n      r={tick % 1 ? '0' : tick % 5 ? '1' : tick % 15 ? '2' : '3'}\n      fill=\"gray\"\n      strokeWidth=\"0\"\n      transform={`rotate(${tick * 6})`}\n    />\n  );\n};\n","import { FC } from 'react';\nimport { Dial } from './Dial';\nimport { Tick } from './Tick';\n\nconst ticks = Array(60)\n  .fill(0)\n  .map((_, i) => i);\n\ninterface ClockFaceProps {\n  time: { hour: number; minute: number; second: number };\n  animatingDials?: { hour: boolean; minute: boolean; second: boolean };\n}\n\nexport const ClockFace: FC<ClockFaceProps> = ({ time: { hour, minute, second }, animatingDials }) => {\n  const hourDegrees = hour * 30;\n  const minuteDegrees = minute * 6;\n  const secondDegrees = second * 6;\n\n  return (\n    <>\n      {ticks.map((tick) => (\n        <Tick tick={tick} key={tick} />\n      ))}\n\n      <Dial type=\"hour\" positionDegrees={hourDegrees} animating={animatingDials?.hour} />\n      <Dial type=\"minute\" positionDegrees={minuteDegrees} animating={animatingDials?.minute} />\n      <Dial type=\"second\" positionDegrees={secondDegrees} animating={animatingDials?.second} />\n      <circle r={5} fill=\"black\" />\n    </>\n  );\n};\n","import { FC } from 'react';\n\nexport const ClockSVG: FC<{ title: string }> = ({ children, title }) => {\n  return (\n    <svg height=\"250\" width=\"250\">\n      <title>{title}</title>\n      <g transform=\"translate(125,125)\">{children}</g>\n    </svg>\n  );\n};\n","import { CircleDirection, distanceOnCircle } from './circle-distance';\n\nfunction modulus(a: number, n: number) {\n  return ((a % n) + n) % n;\n}\n\nexport function interpolateAndClamp(\n  source: number,\n  target: number,\n  timeDelta: number,\n  speed: number,\n  direction: CircleDirection,\n  period: number,\n) {\n  const moveDistance = speed * timeDelta;\n  const distanceToTarget = distanceOnCircle(source, target, period, direction);\n\n  if (moveDistance >= distanceToTarget) return target;\n\n  return modulus(source + moveDistance * direction, period);\n}\n","export type CircleDirection = 1 | -1;\n\nexport function distanceOnCircle(source: number, target: number, circumference: number, direction: CircleDirection) {\n  if (target === source) {\n    return 0;\n  } else {\n    const [a, b] = direction === 1 ? [source, target] : [target, source];\n    if (b > a) {\n      return b - a;\n    } else {\n      return b + circumference - a;\n    }\n  }\n}\n","import { useEffect, useRef } from 'react';\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T | null>(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","import { CircleDirection } from './circle-distance';\n\nexport function getOptimalDirectionOnCircle(source: number, target: number, circumference: number): CircleDirection {\n  const half = circumference / 2;\n  const diff = target - source;\n  const absDiff = Math.abs(diff);\n  const sgn = Math.sign(diff);\n  if (source === target) {\n    return 1;\n  } else if (absDiff < half) {\n    return sgn as CircleDirection;\n  } else if (absDiff > half) {\n    return -sgn as CircleDirection;\n  } else {\n    return 1;\n  }\n}\n","import _ from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { DialsHMS, HMSKey } from '../dials-hms';\nimport { DialInterpolatorOptions, InterpolatorState, useDialInterpolator } from './use-dial-interpolator';\n\nexport const hmsConfig: Record<HMSKey, DialInterpolatorOptions> = {\n  hour: {\n    period: 12,\n    speed: 12 / 1000,\n  },\n  minute: {\n    period: 60,\n    speed: 60 / 1000,\n  },\n  second: {\n    period: 60,\n    speed: 60 / 1000,\n  },\n} as const;\n\nexport function useModeInterpolator<T extends string>(time: number, mode: T, modesHMS: Record<T, DialsHMS>) {\n  const [targetMode, setTargetMode] = useState(mode);\n  const [interpolate, setInterpolate] = useState(false);\n\n  const targetHMS = modesHMS[targetMode];\n\n  const interpolators = {\n    hour: useDialInterpolator(time, targetHMS.hour, interpolate, hmsConfig.hour),\n    minute: useDialInterpolator(time, targetHMS.minute, interpolate, hmsConfig.minute),\n    second: useDialInterpolator(time, targetHMS.second, interpolate, hmsConfig.second),\n  };\n\n  // finish interpolation when all dials have reached their interpolation target\n  if (interpolate && _(interpolators).every((x) => x.status === InterpolatorState.Finished)) {\n    setInterpolate(false);\n  }\n\n  useEffect(() => {\n    if (mode !== targetMode) {\n      setTargetMode(mode);\n      setInterpolate(true);\n    }\n  }, [mode, targetMode]);\n\n  return {\n    value: _.mapValues(interpolators, (i) => i.value),\n    interpolating: _.mapValues(interpolators, (i) => i.status === InterpolatorState.Interpolating),\n  };\n}\n","import { useReducer } from 'react';\n\nexport enum RunState {\n  Stopped,\n  Running,\n  Paused,\n}\n\nexport enum StopwatchActionType {\n  Start,\n  Pause,\n  Reset,\n}\n\nexport interface StopwatchState {\n  /**\n   * The current run state of the stopwatch (stopped, running, paused)\n   */\n  runState: RunState;\n\n  /**\n   * The time, in milliseconds, accrued before the current running period\n   */\n  timeAccruedBeforeCurrent: number;\n\n  /**\n   * The start timestamp of the current running period (if any)\n   */\n  currentStartTimestamp: number | null;\n}\n\nexport type StopwatchAction =\n  | {\n      type: StopwatchActionType.Reset;\n    }\n  | {\n      type: StopwatchActionType.Start | StopwatchActionType.Pause;\n      timestamp: number;\n    };\n\nconst allowedActions = {\n  [RunState.Stopped]: [StopwatchActionType.Start, StopwatchActionType.Reset],\n  [RunState.Running]: [StopwatchActionType.Pause, StopwatchActionType.Reset],\n  [RunState.Paused]: [StopwatchActionType.Start, StopwatchActionType.Reset],\n};\n\nfunction stopwatchReducer(state: StopwatchState, action: StopwatchAction): StopwatchState {\n  if (!allowedActions[state.runState].includes(action.type)) {\n    throw new Error(`Invalid action ${action.type} for state ${state.runState}`);\n  }\n\n  if (action.type === StopwatchActionType.Reset) {\n    return initStopwatch();\n  } else if (action.type === StopwatchActionType.Start) {\n    return {\n      ...state,\n      runState: RunState.Running,\n      currentStartTimestamp: action.timestamp,\n    };\n  } else if (action.type === StopwatchActionType.Pause) {\n    if (state.currentStartTimestamp === null) throw new Error('currentStartTimeStamp is null but runState is Running');\n\n    const currentAccruedTime = action.timestamp - state.currentStartTimestamp;\n    return {\n      runState: RunState.Paused,\n      timeAccruedBeforeCurrent: state.timeAccruedBeforeCurrent + currentAccruedTime,\n      currentStartTimestamp: null,\n    };\n  } else return state;\n}\n\nfunction initStopwatch(): StopwatchState {\n  return {\n    runState: RunState.Stopped,\n    timeAccruedBeforeCurrent: 0,\n    currentStartTimestamp: null,\n  };\n}\n\nexport function useStopwatch(currentTimestamp: number) {\n  const [state, dispatch] = useReducer(stopwatchReducer, initStopwatch());\n  const { runState, timeAccruedBeforeCurrent, currentStartTimestamp } = state;\n\n  // Time elapsed in the current running period.\n  // Reject negative values when the start timestamp (coming e.g. from a button click) is more recent than the current time passed to the hook\n  const deltaTime = currentStartTimestamp === null ? 0 : Math.max(0, currentTimestamp - currentStartTimestamp);\n\n  const timeMs = runState === RunState.Running ? timeAccruedBeforeCurrent + deltaTime : timeAccruedBeforeCurrent;\n\n  return {\n    state,\n    timeMs,\n    dispatch,\n  };\n}\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: block;\n  background-color: palevioletred;\n  color: white;\n  border: none;\n  box-shadow: none;\n  border-radius: 10px;\n  padding: 10px 5px;\n  margin: 5px 2px;\n  width: 100%;\n  text-transform: uppercase;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Heading = styled.h3`\n  color: #aaa;\n  text-align: center;\n  margin: 0.5em;\n`;\n","export function formatStopwatchTime(timeMs: number): string {\n  const hours = Math.floor(timeMs / 3_600_000);\n  const time = new Date(timeMs);\n  return `${hours}:${padZero(time.getUTCMinutes())}:${padZero(time.getUTCSeconds())}.${padZero(\n    time.getUTCMilliseconds(),\n    3,\n  )}`;\n}\n\nconst twelveHours = 12 * 60 * 60 * 1000;\n\n/**\n * Get number of hours that don't fit on a 12 hour clock face.\n * @param timeMs\n * @returns\n */\nexport function getStopwatchSurplusHours(timeMs: number): number {\n  return Math.floor(timeMs / twelveHours) * 12;\n}\n\nfunction padZero(value: number, digits = 2): string {\n  return `${value}`.padStart(digits, '0');\n}\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPause, faPlay, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nimport './App.css';\n\nimport { getClockHMS, getStopwatchHMS } from './clock/dials-hms';\nimport { ClockFace } from './clock/display/ClockFace';\nimport { ClockSVG } from './clock/display/ClockSVG';\nimport { useModeInterpolator } from './clock/interpolation/use-mode-interpolator';\nimport { StopwatchActionType, RunState, useStopwatch } from './clock/use-stopwatch';\nimport { useTime } from './clock/use-time';\nimport { useToggle } from './hooks/use-toggle';\nimport { Button, Heading, Row } from './ui';\nimport { formatStopwatchTime, getStopwatchSurplusHours } from './clock/display/format-stopwatch';\n\ntype ClockMode = 'clock' | 'stopwatch';\n\nfunction App() {\n  const clockDateTime = useTime();\n  const clockTimestamp = clockDateTime.getTime();\n\n  const {\n    state: { runState },\n    timeMs: stopwatchTimeMs,\n    dispatch: stopwatchAction,\n  } = useStopwatch(clockTimestamp);\n\n  const stopwatchSurplusHours = getStopwatchSurplusHours(stopwatchTimeMs);\n\n  const modeToggle = useToggle<ClockMode>('clock', 'stopwatch');\n  const modeHMS = {\n    clock: getClockHMS(clockDateTime),\n    stopwatch: getStopwatchHMS(stopwatchTimeMs),\n  };\n\n  const { value: currentHMS, interpolating: interpolatingDials } = useModeInterpolator(\n    clockTimestamp,\n    modeToggle.current,\n    modeHMS,\n  );\n  const mode = modeToggle.current;\n\n  return (\n    <div className=\"App\">\n      <div className=\"clock\">\n        <ClockSVG\n          title={\n            mode === 'clock'\n              ? `Clock: ${clockDateTime.toLocaleTimeString()}`\n              : `Stopwatch: ${formatStopwatchTime(stopwatchTimeMs)}`\n          }\n        >\n          <ClockFace time={currentHMS} animatingDials={interpolatingDials} />\n          {mode === 'stopwatch' && stopwatchSurplusHours && (\n            <text x=\"125\" y=\"100\" textAnchor=\"end\">\n              +{stopwatchSurplusHours}h\n            </text>\n          )}\n        </ClockSVG>\n        <div>\n          <Button onClick={modeToggle.toggle}>Switch to {modeToggle.other}</Button>\n          {mode === 'stopwatch' && (\n            <div style={{ marginTop: '2em' }}>\n              <Heading>\n                Stopwatch\n                {\n                  {\n                    [RunState.Running]: ' running...',\n                    [RunState.Paused]: ' paused',\n                    [RunState.Stopped]: '',\n                  }[runState]\n                }\n              </Heading>\n              <Row>\n                {runState !== RunState.Running && (\n                  <Button onClick={() => stopwatchAction({ type: StopwatchActionType.Start, timestamp: Date.now() })}>\n                    <FontAwesomeIcon icon={faPlay} /> {runState === RunState.Stopped ? 'Start' : 'Resume'}\n                  </Button>\n                )}\n                {runState === RunState.Running && (\n                  <Button onClick={() => stopwatchAction({ type: StopwatchActionType.Pause, timestamp: Date.now() })}>\n                    <FontAwesomeIcon icon={faPause} /> Pause\n                  </Button>\n                )}\n                {runState !== RunState.Stopped && (\n                  <Button onClick={() => stopwatchAction({ type: StopwatchActionType.Reset })}>\n                    <FontAwesomeIcon icon={faTimes} /> Reset\n                  </Button>\n                )}\n              </Row>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\nimport useInterval from 'use-interval';\n\nexport function useTime(updateIntervalMs: number = 10) {\n  const [time, setTime] = useState(new Date());\n  useInterval(() => setTime(new Date()), updateIntervalMs);\n\n  return time;\n}\n","import { useCallback, useState } from 'react';\n\nexport interface ValueToggle<ValueType> {\n  current: ValueType;\n  toggle: () => void;\n  other: ValueType;\n}\n\nexport function useToggle<ValueType>(first: ValueType, second: ValueType): ValueToggle<ValueType> {\n  const [value, setValue] = useState(first);\n\n  const otherValue = value === first ? second : first;\n\n  const toggle = useCallback(() => {\n    setValue(value === first ? second : first);\n  }, [value, first, second]);\n\n  return { current: value, toggle, other: otherValue };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}